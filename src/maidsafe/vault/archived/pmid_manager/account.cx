/*  Copyright 2012 MaidSafe.net limited

    This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,
    version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
    licence you accepted on initial access to the Software (the "Licences").

    By contributing code to the MaidSafe Software, or to this project generally, you agree to be
    bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root
    directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also
    available at: http://www.maidsafe.net/licenses

    Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed
    under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.

    See the Licences for the specific language governing permissions and limitations relating to
    use of the MaidSafe Software.                                                                 */

#include <string>

#include "maidsafe/data_types/data_name_variant.h"

#include "maidsafe/vault/account_db.h"
#include "maidsafe/vault/db.h"
#include "maidsafe/vault/utils.h"
#include "maidsafe/vault/pmid_manager/account.h"
#include "maidsafe/vault/unresolved_action.pb.h"


namespace maidsafe {
namespace vault {

const size_t PmidAccount::kSyncTriggerCount_(1);

PmidAccount::PmidAccount(const PmidName& pmid_name,  Db& db, const NodeId& this_node_id)
    : pmid_name_(pmid_name),
      metadata_(pmid_name),
      pmid_node_status_(PmidNodeStatus::kUp),
      account_db_(new AccountDb(db)),
      sync_(account_db_.get(), this_node_id),
      account_transfer_nodes_(0) {}

PmidAccount::PmidAccount(const PmidName& pmid_name,
                         Db& db,
                         const NodeId& this_node_id,
                         const NodeId& source_id,
                         const serialised_type& serialised_pmid_account_details)
    : pmid_name_(pmid_name),
      metadata_(),
      account_db_(new AccountDb(db)),
      sync_(account_db_.get(), this_node_id),
      account_transfer_nodes_(routing::Parameters::node_group_size - 1) {
  ApplyAccountTransfer(source_id, serialised_pmid_account_details);

  //protobuf::PmidAccount pmid_account;
  //if (!pmid_account.ParseFromString(serialised_pmid_account_details->string())) {
  //  LOG(kError) << "Failed to parse pmid_account.";
  //  BOOST_THROW_EXCEPTION(MakeError(CommonErrors::parsing_error));
  //}
  ////for (auto& recent_data : pmid_account.recent_data_stored()) {
  ////  DataElement data_element(GetDataNameVariant(static_cast<DataTagValue>(recent_data.type()),
  ////                                              Identity(recent_data.name())),
  ////                           recent_data.size());
  ////  recent_data_stored_.push_back(data_element);
  ////}
}

PmidAccount::PmidAccount(PmidAccount&& other)
    : pmid_name_(std::move(other.pmid_name_)),
      metadata_(std::move(other.metadata_)),
      account_db_(std::move(other.account_db_)),
      sync_(std::move(other.sync_)),
      account_transfer_nodes_(std::move(other.account_transfer_nodes_)) {}

PmidAccount& PmidAccount::operator=(PmidAccount&& other) {
  pmid_name_ = std::move(other.pmid_name_);
  metadata_ = std::move(other.metadata_);
  account_db_ = std::move(other.account_db_);
  sync_ = std::move(other.sync_);
  account_transfer_nodes_ = std::move(other.account_transfer_nodes_);
  return *this;
}

PmidAccount::serialised_type PmidAccount::Serialise() {
  protobuf::PmidManagerMetadata proto_metadata;
  proto_metadata.set_pmid_name(metadata_.pmid_name->string());
  proto_metadata.set_stored_count(metadata_.stored_count);
  proto_metadata.set_stored_total_size(metadata_.stored_total_size);
  proto_metadata.set_lost_count(metadata_.lost_count);
  proto_metadata.set_lost_total_size(metadata_.lost_total_size);
  proto_metadata.set_claimed_available_size(metadata_.claimed_available_size);

  protobuf::PmidAccountDetails proto_pmid_account_details;

  proto_pmid_account_details.set_serialised_pmid_manager_metadata(proto_metadata.SerializeAsString());

  auto db_entries(account_db_->Get());
  GetTagValueAndIdentityVisitor type_and_name_visitor;
  for (const auto& db_entry : db_entries) {
    auto name(db_entry.first.name());
    auto type_and_name(boost::apply_visitor(type_and_name_visitor, name));
    auto proto_db_entry(proto_pmid_account_details.add_db_entry());
    proto_db_entry->set_type(static_cast<uint32_t>(type_and_name.first));
    proto_db_entry->set_name(type_and_name.second.string());
    protobuf::PmidAccountDbValue proto_db_value;
    if (!proto_db_value.ParseFromString(db_entry.second.string()))
      BOOST_THROW_EXCEPTION(MakeError(CommonErrors::parsing_error));
    proto_db_entry->mutable_value()->CopyFrom(proto_db_value);
  }

  auto unresolved_data(sync_.GetUnresolvedData());
  for (const auto& unresolved_entry : unresolved_data) {
    proto_pmid_account_details.add_serialised_unresolved_entry(
        unresolved_entry.Serialise()->string());
  }

  return serialised_type(NonEmptyString(proto_pmid_account_details.SerializeAsString()));
}

void PmidAccount::PutData(int32_t size) {
  metadata_.stored_total_size += size;
}

bool PmidAccount::ApplyAccountTransfer(const NodeId& source_id,
                                       const serialised_type& serialised_pmid_account_details) {
  assert(account_transfer_nodes_);
  if (account_transfer_nodes_ == 0)
    return false;
  bool all_account_transfers_received(--account_transfer_nodes_ == 0);

  protobuf::PmidAccountDetails proto_pmid_account_details;
  if (!proto_pmid_account_details.ParseFromString(serialised_pmid_account_details->string()))
    BOOST_THROW_EXCEPTION(MakeError(CommonErrors::parsing_error));

  protobuf::PmidManagerMetadata proto_pmid_record;
  if (!proto_pmid_record.ParseFromString(proto_pmid_account_details.serialised_pmid_record()))
    BOOST_THROW_EXCEPTION(MakeError(CommonErrors::parsing_error));
  metadata_.pmid_name.data = Identity(proto_pmid_record.pmid_name());
  metadata_.stored_count = proto_pmid_record.stored_count();
  metadata_.stored_total_size = proto_pmid_record.stored_total_size();
  metadata_.lost_count = proto_pmid_record.lost_count();
  metadata_.lost_total_size = proto_pmid_record.lost_total_size();
  metadata_.claimed_available_size = proto_pmid_record.claimed_available_size();

  for (int i(0); i != proto_pmid_account_details.db_entry_size(); ++i) {
    auto data_name(GetDataNameVariant(
        static_cast<DataTagValue>(proto_pmid_account_details.db_entry(i).type()),
        Identity(proto_pmid_account_details.db_entry(i).name())));
    int32_t size(proto_pmid_account_details.db_entry(i).value().size());
    PmidManagerUnresolvedEntry entry(
        std::make_pair(data_name, nfs::MessageAction::kPut), size, source_id);
    if (sync_.AddAccountTransferRecord(entry, all_account_transfers_received).size() == 1U)
      metadata_.stored_total_size += size;
  }

  for (int i(0); i != proto_pmid_account_details.serialised_unresolved_entry_size(); ++i) {
    PmidManagerUnresolvedEntry entry(PmidManagerUnresolvedEntry::serialised_type(
        NonEmptyString(proto_pmid_account_details.serialised_unresolved_entry(i))));
    if (!sync_.AddUnresolvedEntry(entry).empty() && entry.messages_contents.front().value)
      metadata_.stored_total_size += *entry.messages_contents.front().value;
  }

  return all_account_transfers_received;
}

void PmidAccount::AddLocalUnresolvedEntry(const PmidManagerUnresolvedEntry& unresolved_entry) {
  sync_.AddLocalEntry(unresolved_entry);
}

NonEmptyString PmidAccount::GetSyncData() {
  if (sync_.GetUnresolvedCount() < kSyncTriggerCount_)
    return NonEmptyString();

  auto unresolved_entries(sync_.GetUnresolvedData());
  if (unresolved_entries.empty())
    return NonEmptyString();

  protobuf::UnresolvedEntries proto_unresolved_entries;
  for (const auto& unresolved_entry : unresolved_entries) {
    proto_unresolved_entries.add_serialised_unresolved_entry(
        unresolved_entry.Serialise()->string());
  }
  return NonEmptyString(proto_unresolved_entries.SerializeAsString());
}

void PmidAccount::ApplySyncData(const NonEmptyString& serialised_unresolved_entries) {
  protobuf::UnresolvedEntries proto_unresolved_entries;
  if (!proto_unresolved_entries.ParseFromString(serialised_unresolved_entries.string()))
    BOOST_THROW_EXCEPTION(MakeError(CommonErrors::parsing_error));

  for (int i(0); i != proto_unresolved_entries.serialised_unresolved_entry_size(); ++i) {
    PmidManagerUnresolvedEntry entry(PmidManagerUnresolvedEntry::serialised_type(
        NonEmptyString(proto_unresolved_entries.serialised_unresolved_entry(i))));
    if (!sync_.AddUnresolvedEntry(entry).empty() && entry.messages_contents.front().value) {
      if (entry.key.second == nfs::MessageAction::kPut)
        metadata_.stored_total_size += *entry.messages_contents.front().value;
      else
        metadata_.stored_total_size -= *entry.messages_contents.front().value;
    }
  }
}

void PmidAccount::ReplaceNodeInSyncList(const NodeId& old_node, const NodeId& new_node) {
  if (account_transfer_nodes_ != 0)
    --account_transfer_nodes_;
  sync_.ReplaceNode(old_node, new_node);
}

PmidManagerMetadata PmidAccount::GetMetadata() {
  return metadata_;

}

PmidAccount::Name PmidAccount::name() const {
  return pmid_name_;
}

PmidAccount::PmidNodeStatus PmidAccount::pmid_node_status() const {
  return pmid_node_status_;
}

int64_t PmidAccount::total_data_stored_by_pmids() const {
  return metadata_.stored_total_size;
}

}  // namespace vault
}  // namespace maidsafe
