//  Copyright 2012 MaidSafe.net limited

    This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,
    version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
    licence you accepted on initial access to the Software (the "Licences").

    By contributing code to the MaidSafe Software, or to this project generally, you agree to be
    bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root
    directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also
    available at: http://www.maidsafe.net/licenses

    Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed
    under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.

    See the Licences for the specific language governing permissions and limitations relating to
    use of the MaidSafe Software.                                                                 */

//#include "maidsafe/vault/pmid_manager/merge_policy.h"

//#include "maidsafe/common/error.h"

//#include "maidsafe/vault/db.h"
//#include "maidsafe/vault/pmid_manager/pmid_manager.pb.h"


//namespace maidsafe {
//namespace vault {

//PmidManagerMergePolicy::PmidManagerMergePolicy(AccountDb* account_db)
//    : unresolved_data_(),
//      account_db_(account_db) {}

//PmidManagerMergePolicy::PmidManagerMergePolicy(PmidManagerMergePolicy&& other)
//    : unresolved_data_(std::move(other.unresolved_data_)),
//      account_db_(other.account_db_) {}

//PmidManagerMergePolicy& PmidManagerMergePolicy::operator=(PmidManagerMergePolicy&& other) {
//  unresolved_data_ = std::move(other.unresolved_data_);
//  return *this;
//}

//void PmidManagerMergePolicy::Merge(const UnresolvedEntry& unresolved_entry) {
//  auto serialised_db_value(GetFromDb(unresolved_entry.key.first));
//  if (unresolved_entry.key.second == nfs::MessageAction::kPut &&
//      !unresolved_entry.dont_add_to_db &&
//      unresolved_entry.messages_contents.front().value) {
//    MergePut(unresolved_entry.key.first, *unresolved_entry.messages_contents.front().value,
//             serialised_db_value);
//  } else if (unresolved_entry.key.second == nfs::MessageAction::kDelete) {
//    MergeDelete(unresolved_entry.key.first, serialised_db_value);
//  } else {
//    BOOST_THROW_EXCEPTION(MakeError(CommonErrors::invalid_parameter));
//  }
//}

//void PmidManagerMergePolicy::MergePut(const DataNameVariant& data_name,
//                                      UnresolvedEntry::Value size,
//                                      const NonEmptyString& serialised_db_value) {
//  if (!serialised_db_value.IsInitialised())
//    account_db_->Put(std::make_pair(DbKey(data_name), SerialiseDbValue(Size(size))));
//}

//void PmidManagerMergePolicy::MergeDelete(const DataNameVariant& data_name,
//                                         const NonEmptyString& serialised_db_value) {
//  if (!serialised_db_value.IsInitialised()) {
//    // No need to check in unresolved_data_, since the corresponding "Put" will already have been
//    // marked as "dont_add_to_db".
//    return;
//  }
//  account_db_->Delete(DbKey(data_name));
//}

//NonEmptyString PmidManagerMergePolicy::SerialiseDbValue(Size db_value) const {
//  protobuf::PmidAccountDbValue proto_db_value;
//  proto_db_value.set_size(db_value);
//  return NonEmptyString(proto_db_value.SerializeAsString());
//}

//PmidManagerMergePolicy::Size PmidManagerMergePolicy::ParseDbValue(
//    NonEmptyString serialised_db_value) const {
//  protobuf::PmidAccountDbValue proto_db_value;
//  if (!proto_db_value.ParseFromString(serialised_db_value.string()))
//    BOOST_THROW_EXCEPTION(MakeError(CommonErrors::parsing_error));
//  return Size(proto_db_value.size());
//}

//NonEmptyString PmidManagerMergePolicy::GetFromDb(const DataNameVariant& data_name) {
//  NonEmptyString serialised_db_value;
//  try {
//    serialised_db_value = account_db_->Get(DbKey(data_name));
//  }
//  catch(const vault_error&) {}
//  return serialised_db_value;
//}


//}  // namespace vault
//}  // namespace maidsafe
