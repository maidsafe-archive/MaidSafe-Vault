/*  Copyright 2013 MaidSafe.net limited

    This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,
    version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
    licence you accepted on initial access to the Software (the "Licences").

    By contributing code to the MaidSafe Software, or to this project generally, you agree to be
    bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root
    directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also
    available at: http://www.maidsafe.net/licenses

    Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed
    under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.

    See the Licences for the specific language governing permissions and limitations relating to
    use of the MaidSafe Software.                                                                 */

option optimize_for = LITE_RUNTIME;

package maidsafe.vault.protobuf;

message UnresolvedAction {
  required bytes serialised_key = 1;
  required bytes serialised_action = 2;
  required int32 entry_id = 3;
  repeated bytes seen_list = 4;
}

/*  TODO - Delete this commented block - temporarily left here for reference.
message MaidAndPmidUnresolvedEntry {
  message Key {
    required uint32 type = 1;
    required bytes name = 2;
    required int32 action = 3;
  }
  message MessageContent {
    required bytes peer = 1;
    optional int32 entry_id = 2;
    optional int32 value = 3;
  }
  required Key key = 1;
  repeated MessageContent messages_contents = 2;
  optional bool dont_add_to_db = 3;
}

message DataManagerValueDelta {
  required int32 data_size = 1;
  optional int64 subscribers = 2;
  repeated bytes new_online = 3;
  repeated bytes new_offline = 4;
}

message DataManagerUnresolvedEntry {
  message Key {
    required uint32 type = 1;
    required bytes name = 2;
    required int32 action = 3;
  }
  message MessageContent {
    required bytes peer = 1;
    optional int32 entry_id = 2;
    optional bytes value = 3;
  }
  required Key key = 1;
  repeated MessageContent messages_contents = 2;
  optional bool dont_add_to_db = 3;
}

message UnresolvedEntries {
  repeated bytes serialised_unresolved_entry = 1;
}

message VersionHandlerUnresolvedEntry {
  message Key {
    required uint32 name_type = 1;
    required bytes name = 2;
    required bytes originator = 3;
    required int32 action = 4;
  }
  message Version {
    required bytes id = 1;
    required int64 index = 2;
  }
  message Value {
    optional Version version = 1;
    optional Version new_version = 2;
    optional bytes serialised_db_value = 3;
  }
  message MessageContent {
    required bytes peer = 1;
    required int32 entry_id = 2;
    optional Value value = 3;
  }
  required Key key = 1;
  repeated MessageContent messages_contents = 2;
}
*/